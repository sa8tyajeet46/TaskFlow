// This file is your Prisma schema for PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  image           String?
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  favoriteIds     String[]  // In PostgreSQL, we use array type directly
  
  // Relations
  session         Session[]
  accounts        Account[]
    organizationMembers OrganizationMember[]
  projectMembers      ProjectMember[]
  createdProjects     Project[]           @relation("ProjectCreator")
  assignedTasks       Task[]              @relation("TaskAssignee")
  createdTasks        Task[]              @relation("TaskCreator")
  taskComments        TaskComment[]
  taskAttachments     TaskAttachment[]
  timeEntries         TimeEntry[]
  activityLogs        ActivityLog[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text  // Using Text for potentially large tokens
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  
  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                 String               @id @default(uuid())
  name               String
  logoUrl            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  members            OrganizationMember[]
  projects           Project[]
}

model OrganizationMember {
  id                 String               @id @default(uuid())
  organizationId     String
  userId             String
  role               String               @default("member")
  createdAt          DateTime             @default(now())
  
  // Relations
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
}

model Project {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  organizationId     String
  status             String               @default("active")
  startDate          DateTime?
  endDate            DateTime?
  createdById        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy          User                 @relation("ProjectCreator", fields: [createdById], references: [id])
  members            ProjectMember[]
  taskLists          TaskList[]
  tasks              Task[]
}

model ProjectMember {
  id                 String               @id @default(uuid())
  projectId          String
  userId             String
  role               String               @default("member")
  createdAt          DateTime             @default(now())
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
}

model TaskList {
  id                 String               @id @default(uuid())
  projectId          String
  name               String
  position           Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks              Task[]
}

model Task {
  id                 String               @id @default(uuid())
  title              String
  description        String?
  projectId          String
  taskListId         String?
  status             String               @default("todo")
  priority           String               @default("medium")
  dueDate            DateTime?
  estimatedHours     Decimal?             @db.Decimal(8, 2)
  position           Int                  @default(0)
  createdById        String
  assignedToId       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskList           TaskList?            @relation(fields: [taskListId], references: [id], onDelete: SetNull)
  createdBy          User                 @relation("TaskCreator", fields: [createdById], references: [id])
  assignedTo         User?                @relation("TaskAssignee", fields: [assignedToId], references: [id])
  subtasks           Subtask[]
  comments           TaskComment[]
  attachments        TaskAttachment[]
  timeEntries        TimeEntry[]
}

model Subtask {
  id                 String               @id @default(uuid())
  taskId             String
  title              String
  completed          Boolean              @default(false)
  position           Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  task               Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskComment {
  id                 String               @id @default(uuid())
  taskId             String
  userId             String
  content            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  task               Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
}

model TaskAttachment {
  id                 String               @id @default(uuid())
  taskId             String
  userId             String
  fileName           String
  fileUrl            String
  fileType           String?
  fileSize           Int?
  createdAt          DateTime             @default(now())
  
  // Relations
  task               Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
}

model TimeEntry {
  id                 String               @id @default(uuid())
  taskId             String
  userId             String
  description        String?
  startTime          DateTime
  endTime            DateTime?
  duration           Int?                 // in seconds
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  task               Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id                 String               @id @default(uuid())
  userId             String
  entityType         String               // 'task', 'project', etc.
  entityId           String
  action             String               // 'created', 'updated', etc.
  details            Json?
  createdAt          DateTime             @default(now())
  
  // Relations
  user               User                 @relation(fields: [userId], references: [id])
}